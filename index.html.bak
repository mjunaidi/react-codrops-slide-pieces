
<!DOCTYPE html>
<html lang='en' class=''>
<head>
<meta charset='UTF-8'>
<style class="cp-pen-styles"></style>
<link rel="stylesheet" type="text/css" href="./css/styles.css">
</head>
<body>
<div id="root"></div>
<script src='//static.codepen.io/assets/common/stopExecutionOnTimeout-b2a7b3fe212eaa732349046d8416e00a9dec26eb7fd347590fbced3ab38af52e.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react.min.js'></script><script src='https://cdnjs.cloudflare.com/ajax/libs/react/15.6.1/react-dom.min.js'></script><script src='https://tympanus.net/Tutorials/PiecesSlider/js/anime.min.js'></script><script src='https://tympanus.net/Tutorials/PiecesSlider/js/pieces.min.js'></script>
<script >var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) {if (window.CP.shouldStopExecution(1)){break;} var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); }
window.CP.exitedLoop(1);
 } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

console.clear();

var sliderFn = function sliderFn() {

  // Get all images and texts, get the `canvas` element, and save slider length
  var sliderCanvas = document.querySelector('.pieces-slider__canvas');
  var imagesEl = [].slice.call(document.querySelectorAll('.pieces-slider__image'));
  var textEl = [].slice.call(document.querySelectorAll('.pieces-slider__text'));
  var slidesLength = imagesEl.length;

  // Define indexes related variables and functions
  var currentIndex = 0,
      currentImageIndex,
      currentTextIndex,
      currentNumberIndex;
  // Update current indexes for image, text and number
  function updateIndexes() {
    currentImageIndex = currentIndex * 3;
    currentTextIndex = currentImageIndex + 1;
    currentNumberIndex = currentImageIndex + 2;
  }
  updateIndexes();
  var textIndexes = [];
  var numberIndexes = [];

  // Some other useful variables
  var windowWidth = window.innerWidth;
  var piecesSlider;

  // Options for images
  var imageOptions = {
    angle: 45,
    extraSpacing: { extraX: 100, extraY: 200 },
    piecesWidth: function piecesWidth() {
      return Pieces.random(50, 200);
    },
    ty: function ty() {
      return Pieces.random(-400, 400);
    }
  };

  // Options for texts
  var textOptions = {
    color: 'white',
    backgroundColor: '#5104ab',
    fontSize: function fontSize() {
      return windowWidth > 720 ? 50 : 30;
    },
    padding: '15 20 10 20',
    angle: -45,
    piecesSpacing: 2,
    extraSpacing: { extraX: 0, extraY: 300 },
    piecesWidth: function piecesWidth() {
      return Pieces.random(50, 200);
    },
    ty: function ty() {
      return Pieces.random(-200, 200);
    },
    translate: function translate() {
      if (windowWidth > 1120) return { translateX: 200, translateY: 200 };
      if (windowWidth > 720) return { translateX: 0, translateY: 200 };
      return { translateX: 0, translateY: 100 };
    }
  };

  // Options for numbers
  var numberOptions = {
    color: 'white',
    backgroundColor: '#5104ab',
    fontSize: function fontSize() {
      return windowWidth > 720 ? 60 : 20;
    },
    padding: function padding() {
      return windowWidth > 720 ? '18 35 10 38' : '18 25 10 28';
    },
    angle: 0,
    piecesSpacing: 2,
    extraSpacing: { extraX: 10, extraY: 10 },
    piecesWidth: 35,
    ty: function ty() {
      return Pieces.random(-200, 200);
    },
    translate: function translate() {
      if (windowWidth > 1120) return { translateX: -340, translateY: -180 };
      if (windowWidth > 720) return { translateX: -240, translateY: -180 };
      return { translateX: -140, translateY: -100 };
    }
  };

  // Build the array of items to draw using Pieces
  var items = [];
  var imagesReady = 0;
  for (var i = 0; i < slidesLength; i++) {if (window.CP.shouldStopExecution(2)){break;}
    // Wait for all images to load before initializing the slider and event listeners
    var slideImage = new Image();
    slideImage.onload = function () {
      if (++imagesReady == slidesLength) {
        initSlider();
        initEvents();
      }
    };
    // Push all elements for each slide with the corresponding options
    items.push({ type: 'image', value: imagesEl[i], options: imageOptions });
    items.push({ type: 'text', value: textEl[i].innerText, options: textOptions });
    items.push({ type: 'text', value: i + 1, options: numberOptions });
    // Save indexes
    textIndexes.push(i * 3 + 1);
    numberIndexes.push(i * 3 + 2);
    // Set image src
    slideImage.src = imagesEl[i].src;
  }
window.CP.exitedLoop(2);


  // Initialize a Pieces instance with all items we want to draw
  function initSlider() {
    // Stop any current animation if the slider was initialized before
    if (piecesSlider) {
      piecesSlider.stop();
    }

    // Save the new Pieces instance
    piecesSlider = new Pieces({
      canvas: sliderCanvas,
      items: items,
      x: 'centerAll',
      y: 'centerAll',
      piecesSpacing: 1,
      fontFamily: ["'Helvetica Neue', sans-serif"],
      animation: {
        duration: function duration() {
          return Pieces.random(1000, 2000);
        },
        easing: 'easeOutQuint'
      }
      // debug: true
    });

    // Animate all numbers to rotate clockwise indefinitely
    piecesSlider.animateItems({
      items: numberIndexes,
      duration: 20000,
      angle: 360,
      loop: true
    });

    // Show current items: image, text and number
    showItems();
  }

  // Init Event Listeners
  function initEvents() {
    // Select prev or next slide using buttons
    document.querySelector('.pieces-slider__button--prev').addEventListener('click', prevItem);
    document.querySelector('.pieces-slider__button--next').addEventListener('click', nextItem);

    // Select prev or next slide using arrow keys
    document.addEventListener('keydown', function (e) {
      if (e.keyCode == 37) {
        // left
        prevItem();
      } else if (e.keyCode == 39) {
        // right
        nextItem();
      }
    });

    // Handle `resize` event
    window.addEventListener('resize', resizeStart);
  }

  // Show current items: image, text and number
  function showItems() {
    // Show image pieces
    piecesSlider.showPieces({ items: currentImageIndex, ignore: ['tx'], singly: true, update: function update(anim) {
        // Stop the pieces animation at 60%, and run a new indefinitely animation of `ty` for each piece
        if (anim.progress > 60) {
          var piece = anim.animatables[0].target;
          var ty = piece.ty;
          anime.remove(piece);
          anime({
            targets: piece,
            ty: piece.h_ty < 300 ? [{ value: ty + 10, duration: 1000 }, { value: ty - 10, duration: 2000 }, { value: ty, duration: 1000 }] : [{ value: ty - 10, duration: 1000 }, { value: ty + 10, duration: 2000 }, { value: ty, duration: 1000 }],
            duration: 2000,
            easing: 'linear',
            loop: true
          });
        }
      } });
    // Show pieces for text and number, using alternate `ty` values
    piecesSlider.showPieces({ items: currentTextIndex });
    piecesSlider.showPieces({ items: currentNumberIndex, ty: function ty(p, i) {
        return p.s_ty - [-3, 3][i % 2];
      } });
  }

  // Hide current items: image, text and number
  function hideItems() {
    piecesSlider.hidePieces({ items: [currentImageIndex, currentTextIndex, currentNumberIndex] });
  }

  // Select the prev item: hide current items, update indexes, and show the new current item
  function prevItem() {
    hideItems();
    currentIndex = currentIndex > 0 ? currentIndex - 1 : slidesLength - 1;
    updateIndexes();
    showItems();
  }

  // Select the next item: hide current items, update indexes, and show the new current item
  function nextItem() {
    hideItems();
    currentIndex = currentIndex < slidesLength - 1 ? currentIndex + 1 : 0;
    updateIndexes();
    showItems();
  }

  // Handle `resize` event

  var initial = true,
      hideTimer,
      resizeTimer;

  // User starts resizing, so wait 300 ms before reinitialize the slider
  function resizeStart() {
    if (initial) {
      initial = false;
      if (hideTimer) clearTimeout(hideTimer);
      sliderCanvas.classList.add('pieces-slider__canvas--hidden');
    }
    if (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(resizeEnd, 300);
  }

  // User ends resizing, then reinitialize the slider
  function resizeEnd() {
    initial = true;
    windowWidth = window.innerWidth;
    initSlider();
    hideTimer = setTimeout(function () {
      sliderCanvas.classList.remove('pieces-slider__canvas--hidden');
    }, 500);
  }
};

var randomInt = function randomInt(n) {
  if (typeof n === 'number' && n > 0) {
    return Math.floor(Math.random() * n + 1);
  }
  return randomInt(1000);
};

var lipsum = function lipsum(n) {
  var words = ['lorem', 'ipsum', 'dolor', 'sit', 'amet', 'consectetur', 'adipiscing', 'elit', 'vivamus', 'et', 'accumsan', 'augue', 'duis', 'eget', 'nunc', 'id', 'sodales', 'finibus', 'vestibulum', 'sagittis', 'magna', 'nec', 'rutrum', 'volutpat', 'risus', 'tincidunt', 'justo', 'non', 'gravida', 'tortor', 'enim', 'in', 'urna', 'ut', 'vel', 'metus', 'pellentesque', 'porttitor', 'vitae', 'nisi', 'nullam', 'faucibus', 'condimentum', 'quam', 'imperdiet', 'class', 'aptent', 'taciti', 'sociosqu', 'ad', 'litora', 'torquent', 'per', 'conubia', 'nostra', 'inceptos', 'himenaeos', 'interdum', 'malesuada', 'fames', 'ac', 'ante', 'primis', 'curabitur', 'nibh', 'quis', 'iaculis', 'cras', 'mollis', 'eu', 'congue', 'leo'];
  var count = randomInt(n);
  var sentence = [];
  var indexes = new Array(count).fill(0).map(function (index) {
    return Math.floor(Math.random() * words.length);
  });
  indexes.forEach(function (index, i) {
    var word = words[index];
    if (i === 0) sentence.push(word.charAt(0).toUpperCase() + word.substr(1));else sentence.push(word);
  });
  return sentence.join(' ');
};

var Root = function (_React$Component) {
  _inherits(Root, _React$Component);

  function Root(props) {
    _classCallCheck(this, Root);

    var _this = _possibleConstructorReturn(this, (Root.__proto__ || Object.getPrototypeOf(Root)).call(this, props));

    _this.state = {
      slides: [],
      viewIndex: 0
    };
    return _this;
  }

  _createClass(Root, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var count = 10;
      this.createSlides(count, function () {
        sliderFn();
      });
    }
  }, {
    key: 'createSlides',
    value: function createSlides() {
      var _this2 = this;

      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
      var callback = arguments[1];

      if (typeof n === 'number' && n > 0) {
        this.createSlide(function () {
          _this2.createSlides(n - 1, callback);
        });
      } else {
        if (typeof callback === 'function') {
          callback();
        }
      }
    }
  }, {
    key: 'createSlide',
    value: function createSlide(callback) {
      var slides = this.state.slides;
      var slide = {
        name: lipsum(3),
        src: 'https://picsum.photos/200/150/?random=' + randomInt()
      };
      slides.push(slide);
      this.setState({ slides: slides }, function () {
        if (typeof callback === 'function') {
          callback();
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement(
        'div',
        { className: 'pieces-slider' },
        this.state.slides.map(function (slide, index) {
          return React.createElement(
            'div',
            { className: 'pieces-slider__slide' },
            React.createElement('img', { className: 'pieces-slider__image', src: slide.src, alt: '' }),
            React.createElement(
              'div',
              { className: 'pieces-slider__text' },
              slide.name
            )
          );
        }),
        React.createElement('canvas', { className: 'pieces-slider__canvas' }),
        React.createElement(
          'button',
          { className: 'pieces-slider__button pieces-slider__button--prev' },
          'prev'
        ),
        React.createElement(
          'button',
          {
            className: 'pieces-slider__button pieces-slider__button--next',
            onClick: function onClick(e) {
              _this3.setState({ viewIndex: _this3.state.viewIndex + 1 }, function () {
                if (_this3.state.viewIndex >= _this3.state.slides.length / 2) {
                  _this3.createSlides(10, function () {
                    //sliderFn()
                  });
                }
              });
            }
          },
          'next'
        )
      );
    }
  }]);

  return Root;
}(React.Component);

ReactDOM.render(React.createElement(Root, null), document.getElementById('root'));
//# sourceURL=pen.js
</script>
</body></html>
